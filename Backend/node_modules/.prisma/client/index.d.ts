
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model SpotifyAccount
 * 
 */
export type SpotifyAccount = $Result.DefaultSelection<Prisma.$SpotifyAccountPayload>
/**
 * Model Friendship
 * 
 */
export type Friendship = $Result.DefaultSelection<Prisma.$FriendshipPayload>
/**
 * Model NowListening
 * 
 */
export type NowListening = $Result.DefaultSelection<Prisma.$NowListeningPayload>
/**
 * Model TopSongs
 * 
 */
export type TopSongs = $Result.DefaultSelection<Prisma.$TopSongsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.spotifyAccount`: Exposes CRUD operations for the **SpotifyAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpotifyAccounts
    * const spotifyAccounts = await prisma.spotifyAccount.findMany()
    * ```
    */
  get spotifyAccount(): Prisma.SpotifyAccountDelegate<ExtArgs>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<ExtArgs>;

  /**
   * `prisma.nowListening`: Exposes CRUD operations for the **NowListening** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NowListenings
    * const nowListenings = await prisma.nowListening.findMany()
    * ```
    */
  get nowListening(): Prisma.NowListeningDelegate<ExtArgs>;

  /**
   * `prisma.topSongs`: Exposes CRUD operations for the **TopSongs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TopSongs
    * const topSongs = await prisma.topSongs.findMany()
    * ```
    */
  get topSongs(): Prisma.TopSongsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.0
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    SpotifyAccount: 'SpotifyAccount',
    Friendship: 'Friendship',
    NowListening: 'NowListening',
    TopSongs: 'TopSongs'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "spotifyAccount" | "friendship" | "nowListening" | "topSongs"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      SpotifyAccount: {
        payload: Prisma.$SpotifyAccountPayload<ExtArgs>
        fields: Prisma.SpotifyAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpotifyAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpotifyAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>
          }
          findFirst: {
            args: Prisma.SpotifyAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpotifyAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>
          }
          findMany: {
            args: Prisma.SpotifyAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>[]
          }
          create: {
            args: Prisma.SpotifyAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>
          }
          createMany: {
            args: Prisma.SpotifyAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpotifyAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>[]
          }
          delete: {
            args: Prisma.SpotifyAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>
          }
          update: {
            args: Prisma.SpotifyAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>
          }
          deleteMany: {
            args: Prisma.SpotifyAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpotifyAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SpotifyAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpotifyAccountPayload>
          }
          aggregate: {
            args: Prisma.SpotifyAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpotifyAccount>
          }
          groupBy: {
            args: Prisma.SpotifyAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpotifyAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpotifyAccountCountArgs<ExtArgs>
            result: $Utils.Optional<SpotifyAccountCountAggregateOutputType> | number
          }
        }
      }
      Friendship: {
        payload: Prisma.$FriendshipPayload<ExtArgs>
        fields: Prisma.FriendshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findFirst: {
            args: Prisma.FriendshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findMany: {
            args: Prisma.FriendshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          create: {
            args: Prisma.FriendshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          createMany: {
            args: Prisma.FriendshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FriendshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          delete: {
            args: Prisma.FriendshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          update: {
            args: Prisma.FriendshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          deleteMany: {
            args: Prisma.FriendshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FriendshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FriendshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          aggregate: {
            args: Prisma.FriendshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFriendship>
          }
          groupBy: {
            args: Prisma.FriendshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<FriendshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.FriendshipCountArgs<ExtArgs>
            result: $Utils.Optional<FriendshipCountAggregateOutputType> | number
          }
        }
      }
      NowListening: {
        payload: Prisma.$NowListeningPayload<ExtArgs>
        fields: Prisma.NowListeningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NowListeningFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NowListeningFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>
          }
          findFirst: {
            args: Prisma.NowListeningFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NowListeningFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>
          }
          findMany: {
            args: Prisma.NowListeningFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>[]
          }
          create: {
            args: Prisma.NowListeningCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>
          }
          createMany: {
            args: Prisma.NowListeningCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NowListeningCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>[]
          }
          delete: {
            args: Prisma.NowListeningDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>
          }
          update: {
            args: Prisma.NowListeningUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>
          }
          deleteMany: {
            args: Prisma.NowListeningDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NowListeningUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NowListeningUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NowListeningPayload>
          }
          aggregate: {
            args: Prisma.NowListeningAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNowListening>
          }
          groupBy: {
            args: Prisma.NowListeningGroupByArgs<ExtArgs>
            result: $Utils.Optional<NowListeningGroupByOutputType>[]
          }
          count: {
            args: Prisma.NowListeningCountArgs<ExtArgs>
            result: $Utils.Optional<NowListeningCountAggregateOutputType> | number
          }
        }
      }
      TopSongs: {
        payload: Prisma.$TopSongsPayload<ExtArgs>
        fields: Prisma.TopSongsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopSongsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopSongsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>
          }
          findFirst: {
            args: Prisma.TopSongsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopSongsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>
          }
          findMany: {
            args: Prisma.TopSongsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>[]
          }
          create: {
            args: Prisma.TopSongsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>
          }
          createMany: {
            args: Prisma.TopSongsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TopSongsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>[]
          }
          delete: {
            args: Prisma.TopSongsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>
          }
          update: {
            args: Prisma.TopSongsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>
          }
          deleteMany: {
            args: Prisma.TopSongsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopSongsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TopSongsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopSongsPayload>
          }
          aggregate: {
            args: Prisma.TopSongsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopSongs>
          }
          groupBy: {
            args: Prisma.TopSongsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopSongsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopSongsCountArgs<ExtArgs>
            result: $Utils.Optional<TopSongsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    nowListening: number
    initiatedFriendships: number
    receivedFriendships: number
    topSongs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nowListening?: boolean | UserCountOutputTypeCountNowListeningArgs
    initiatedFriendships?: boolean | UserCountOutputTypeCountInitiatedFriendshipsArgs
    receivedFriendships?: boolean | UserCountOutputTypeCountReceivedFriendshipsArgs
    topSongs?: boolean | UserCountOutputTypeCountTopSongsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNowListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NowListeningWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInitiatedFriendshipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedFriendshipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTopSongsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopSongsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    password: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    password: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    username: number
    password: number
    email: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    password?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    password?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    password?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    spotifyAccount?: boolean | User$spotifyAccountArgs<ExtArgs>
    nowListening?: boolean | User$nowListeningArgs<ExtArgs>
    initiatedFriendships?: boolean | User$initiatedFriendshipsArgs<ExtArgs>
    receivedFriendships?: boolean | User$receivedFriendshipsArgs<ExtArgs>
    topSongs?: boolean | User$topSongsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spotifyAccount?: boolean | User$spotifyAccountArgs<ExtArgs>
    nowListening?: boolean | User$nowListeningArgs<ExtArgs>
    initiatedFriendships?: boolean | User$initiatedFriendshipsArgs<ExtArgs>
    receivedFriendships?: boolean | User$receivedFriendshipsArgs<ExtArgs>
    topSongs?: boolean | User$topSongsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      spotifyAccount: Prisma.$SpotifyAccountPayload<ExtArgs> | null
      nowListening: Prisma.$NowListeningPayload<ExtArgs>[]
      initiatedFriendships: Prisma.$FriendshipPayload<ExtArgs>[]
      receivedFriendships: Prisma.$FriendshipPayload<ExtArgs>[]
      topSongs: Prisma.$TopSongsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      username: string
      password: string
      email: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spotifyAccount<T extends User$spotifyAccountArgs<ExtArgs> = {}>(args?: Subset<T, User$spotifyAccountArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    nowListening<T extends User$nowListeningArgs<ExtArgs> = {}>(args?: Subset<T, User$nowListeningArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "findMany"> | Null>
    initiatedFriendships<T extends User$initiatedFriendshipsArgs<ExtArgs> = {}>(args?: Subset<T, User$initiatedFriendshipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany"> | Null>
    receivedFriendships<T extends User$receivedFriendshipsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedFriendshipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany"> | Null>
    topSongs<T extends User$topSongsArgs<ExtArgs> = {}>(args?: Subset<T, User$topSongsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.spotifyAccount
   */
  export type User$spotifyAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    where?: SpotifyAccountWhereInput
  }

  /**
   * User.nowListening
   */
  export type User$nowListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    where?: NowListeningWhereInput
    orderBy?: NowListeningOrderByWithRelationInput | NowListeningOrderByWithRelationInput[]
    cursor?: NowListeningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NowListeningScalarFieldEnum | NowListeningScalarFieldEnum[]
  }

  /**
   * User.initiatedFriendships
   */
  export type User$initiatedFriendshipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * User.receivedFriendships
   */
  export type User$receivedFriendshipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * User.topSongs
   */
  export type User$topSongsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    where?: TopSongsWhereInput
    orderBy?: TopSongsOrderByWithRelationInput | TopSongsOrderByWithRelationInput[]
    cursor?: TopSongsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopSongsScalarFieldEnum | TopSongsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model SpotifyAccount
   */

  export type AggregateSpotifyAccount = {
    _count: SpotifyAccountCountAggregateOutputType | null
    _min: SpotifyAccountMinAggregateOutputType | null
    _max: SpotifyAccountMaxAggregateOutputType | null
  }

  export type SpotifyAccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    spotifyId: string | null
    accessToken: string | null
    refreshToken: string | null
  }

  export type SpotifyAccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    spotifyId: string | null
    accessToken: string | null
    refreshToken: string | null
  }

  export type SpotifyAccountCountAggregateOutputType = {
    id: number
    userId: number
    spotifyId: number
    accessToken: number
    refreshToken: number
    _all: number
  }


  export type SpotifyAccountMinAggregateInputType = {
    id?: true
    userId?: true
    spotifyId?: true
    accessToken?: true
    refreshToken?: true
  }

  export type SpotifyAccountMaxAggregateInputType = {
    id?: true
    userId?: true
    spotifyId?: true
    accessToken?: true
    refreshToken?: true
  }

  export type SpotifyAccountCountAggregateInputType = {
    id?: true
    userId?: true
    spotifyId?: true
    accessToken?: true
    refreshToken?: true
    _all?: true
  }

  export type SpotifyAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpotifyAccount to aggregate.
     */
    where?: SpotifyAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotifyAccounts to fetch.
     */
    orderBy?: SpotifyAccountOrderByWithRelationInput | SpotifyAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpotifyAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotifyAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotifyAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpotifyAccounts
    **/
    _count?: true | SpotifyAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpotifyAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpotifyAccountMaxAggregateInputType
  }

  export type GetSpotifyAccountAggregateType<T extends SpotifyAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateSpotifyAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpotifyAccount[P]>
      : GetScalarType<T[P], AggregateSpotifyAccount[P]>
  }




  export type SpotifyAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpotifyAccountWhereInput
    orderBy?: SpotifyAccountOrderByWithAggregationInput | SpotifyAccountOrderByWithAggregationInput[]
    by: SpotifyAccountScalarFieldEnum[] | SpotifyAccountScalarFieldEnum
    having?: SpotifyAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpotifyAccountCountAggregateInputType | true
    _min?: SpotifyAccountMinAggregateInputType
    _max?: SpotifyAccountMaxAggregateInputType
  }

  export type SpotifyAccountGroupByOutputType = {
    id: string
    userId: string
    spotifyId: string
    accessToken: string
    refreshToken: string
    _count: SpotifyAccountCountAggregateOutputType | null
    _min: SpotifyAccountMinAggregateOutputType | null
    _max: SpotifyAccountMaxAggregateOutputType | null
  }

  type GetSpotifyAccountGroupByPayload<T extends SpotifyAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpotifyAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpotifyAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpotifyAccountGroupByOutputType[P]>
            : GetScalarType<T[P], SpotifyAccountGroupByOutputType[P]>
        }
      >
    >


  export type SpotifyAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    spotifyId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spotifyAccount"]>

  export type SpotifyAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    spotifyId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spotifyAccount"]>

  export type SpotifyAccountSelectScalar = {
    id?: boolean
    userId?: boolean
    spotifyId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
  }

  export type SpotifyAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SpotifyAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SpotifyAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpotifyAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      spotifyId: string
      accessToken: string
      refreshToken: string
    }, ExtArgs["result"]["spotifyAccount"]>
    composites: {}
  }

  type SpotifyAccountGetPayload<S extends boolean | null | undefined | SpotifyAccountDefaultArgs> = $Result.GetResult<Prisma.$SpotifyAccountPayload, S>

  type SpotifyAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpotifyAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SpotifyAccountCountAggregateInputType | true
    }

  export interface SpotifyAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpotifyAccount'], meta: { name: 'SpotifyAccount' } }
    /**
     * Find zero or one SpotifyAccount that matches the filter.
     * @param {SpotifyAccountFindUniqueArgs} args - Arguments to find a SpotifyAccount
     * @example
     * // Get one SpotifyAccount
     * const spotifyAccount = await prisma.spotifyAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpotifyAccountFindUniqueArgs>(args: SelectSubset<T, SpotifyAccountFindUniqueArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SpotifyAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SpotifyAccountFindUniqueOrThrowArgs} args - Arguments to find a SpotifyAccount
     * @example
     * // Get one SpotifyAccount
     * const spotifyAccount = await prisma.spotifyAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpotifyAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, SpotifyAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SpotifyAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountFindFirstArgs} args - Arguments to find a SpotifyAccount
     * @example
     * // Get one SpotifyAccount
     * const spotifyAccount = await prisma.spotifyAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpotifyAccountFindFirstArgs>(args?: SelectSubset<T, SpotifyAccountFindFirstArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SpotifyAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountFindFirstOrThrowArgs} args - Arguments to find a SpotifyAccount
     * @example
     * // Get one SpotifyAccount
     * const spotifyAccount = await prisma.spotifyAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpotifyAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, SpotifyAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SpotifyAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpotifyAccounts
     * const spotifyAccounts = await prisma.spotifyAccount.findMany()
     * 
     * // Get first 10 SpotifyAccounts
     * const spotifyAccounts = await prisma.spotifyAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spotifyAccountWithIdOnly = await prisma.spotifyAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpotifyAccountFindManyArgs>(args?: SelectSubset<T, SpotifyAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SpotifyAccount.
     * @param {SpotifyAccountCreateArgs} args - Arguments to create a SpotifyAccount.
     * @example
     * // Create one SpotifyAccount
     * const SpotifyAccount = await prisma.spotifyAccount.create({
     *   data: {
     *     // ... data to create a SpotifyAccount
     *   }
     * })
     * 
     */
    create<T extends SpotifyAccountCreateArgs>(args: SelectSubset<T, SpotifyAccountCreateArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SpotifyAccounts.
     * @param {SpotifyAccountCreateManyArgs} args - Arguments to create many SpotifyAccounts.
     * @example
     * // Create many SpotifyAccounts
     * const spotifyAccount = await prisma.spotifyAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpotifyAccountCreateManyArgs>(args?: SelectSubset<T, SpotifyAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpotifyAccounts and returns the data saved in the database.
     * @param {SpotifyAccountCreateManyAndReturnArgs} args - Arguments to create many SpotifyAccounts.
     * @example
     * // Create many SpotifyAccounts
     * const spotifyAccount = await prisma.spotifyAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpotifyAccounts and only return the `id`
     * const spotifyAccountWithIdOnly = await prisma.spotifyAccount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpotifyAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, SpotifyAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SpotifyAccount.
     * @param {SpotifyAccountDeleteArgs} args - Arguments to delete one SpotifyAccount.
     * @example
     * // Delete one SpotifyAccount
     * const SpotifyAccount = await prisma.spotifyAccount.delete({
     *   where: {
     *     // ... filter to delete one SpotifyAccount
     *   }
     * })
     * 
     */
    delete<T extends SpotifyAccountDeleteArgs>(args: SelectSubset<T, SpotifyAccountDeleteArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SpotifyAccount.
     * @param {SpotifyAccountUpdateArgs} args - Arguments to update one SpotifyAccount.
     * @example
     * // Update one SpotifyAccount
     * const spotifyAccount = await prisma.spotifyAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpotifyAccountUpdateArgs>(args: SelectSubset<T, SpotifyAccountUpdateArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SpotifyAccounts.
     * @param {SpotifyAccountDeleteManyArgs} args - Arguments to filter SpotifyAccounts to delete.
     * @example
     * // Delete a few SpotifyAccounts
     * const { count } = await prisma.spotifyAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpotifyAccountDeleteManyArgs>(args?: SelectSubset<T, SpotifyAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpotifyAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpotifyAccounts
     * const spotifyAccount = await prisma.spotifyAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpotifyAccountUpdateManyArgs>(args: SelectSubset<T, SpotifyAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SpotifyAccount.
     * @param {SpotifyAccountUpsertArgs} args - Arguments to update or create a SpotifyAccount.
     * @example
     * // Update or create a SpotifyAccount
     * const spotifyAccount = await prisma.spotifyAccount.upsert({
     *   create: {
     *     // ... data to create a SpotifyAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpotifyAccount we want to update
     *   }
     * })
     */
    upsert<T extends SpotifyAccountUpsertArgs>(args: SelectSubset<T, SpotifyAccountUpsertArgs<ExtArgs>>): Prisma__SpotifyAccountClient<$Result.GetResult<Prisma.$SpotifyAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SpotifyAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountCountArgs} args - Arguments to filter SpotifyAccounts to count.
     * @example
     * // Count the number of SpotifyAccounts
     * const count = await prisma.spotifyAccount.count({
     *   where: {
     *     // ... the filter for the SpotifyAccounts we want to count
     *   }
     * })
    **/
    count<T extends SpotifyAccountCountArgs>(
      args?: Subset<T, SpotifyAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpotifyAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpotifyAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpotifyAccountAggregateArgs>(args: Subset<T, SpotifyAccountAggregateArgs>): Prisma.PrismaPromise<GetSpotifyAccountAggregateType<T>>

    /**
     * Group by SpotifyAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotifyAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpotifyAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpotifyAccountGroupByArgs['orderBy'] }
        : { orderBy?: SpotifyAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpotifyAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpotifyAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpotifyAccount model
   */
  readonly fields: SpotifyAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpotifyAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpotifyAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpotifyAccount model
   */ 
  interface SpotifyAccountFieldRefs {
    readonly id: FieldRef<"SpotifyAccount", 'String'>
    readonly userId: FieldRef<"SpotifyAccount", 'String'>
    readonly spotifyId: FieldRef<"SpotifyAccount", 'String'>
    readonly accessToken: FieldRef<"SpotifyAccount", 'String'>
    readonly refreshToken: FieldRef<"SpotifyAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SpotifyAccount findUnique
   */
  export type SpotifyAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * Filter, which SpotifyAccount to fetch.
     */
    where: SpotifyAccountWhereUniqueInput
  }

  /**
   * SpotifyAccount findUniqueOrThrow
   */
  export type SpotifyAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * Filter, which SpotifyAccount to fetch.
     */
    where: SpotifyAccountWhereUniqueInput
  }

  /**
   * SpotifyAccount findFirst
   */
  export type SpotifyAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * Filter, which SpotifyAccount to fetch.
     */
    where?: SpotifyAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotifyAccounts to fetch.
     */
    orderBy?: SpotifyAccountOrderByWithRelationInput | SpotifyAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpotifyAccounts.
     */
    cursor?: SpotifyAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotifyAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotifyAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpotifyAccounts.
     */
    distinct?: SpotifyAccountScalarFieldEnum | SpotifyAccountScalarFieldEnum[]
  }

  /**
   * SpotifyAccount findFirstOrThrow
   */
  export type SpotifyAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * Filter, which SpotifyAccount to fetch.
     */
    where?: SpotifyAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotifyAccounts to fetch.
     */
    orderBy?: SpotifyAccountOrderByWithRelationInput | SpotifyAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpotifyAccounts.
     */
    cursor?: SpotifyAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotifyAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotifyAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpotifyAccounts.
     */
    distinct?: SpotifyAccountScalarFieldEnum | SpotifyAccountScalarFieldEnum[]
  }

  /**
   * SpotifyAccount findMany
   */
  export type SpotifyAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * Filter, which SpotifyAccounts to fetch.
     */
    where?: SpotifyAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotifyAccounts to fetch.
     */
    orderBy?: SpotifyAccountOrderByWithRelationInput | SpotifyAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpotifyAccounts.
     */
    cursor?: SpotifyAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotifyAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotifyAccounts.
     */
    skip?: number
    distinct?: SpotifyAccountScalarFieldEnum | SpotifyAccountScalarFieldEnum[]
  }

  /**
   * SpotifyAccount create
   */
  export type SpotifyAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a SpotifyAccount.
     */
    data: XOR<SpotifyAccountCreateInput, SpotifyAccountUncheckedCreateInput>
  }

  /**
   * SpotifyAccount createMany
   */
  export type SpotifyAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpotifyAccounts.
     */
    data: SpotifyAccountCreateManyInput | SpotifyAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpotifyAccount createManyAndReturn
   */
  export type SpotifyAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SpotifyAccounts.
     */
    data: SpotifyAccountCreateManyInput | SpotifyAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpotifyAccount update
   */
  export type SpotifyAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a SpotifyAccount.
     */
    data: XOR<SpotifyAccountUpdateInput, SpotifyAccountUncheckedUpdateInput>
    /**
     * Choose, which SpotifyAccount to update.
     */
    where: SpotifyAccountWhereUniqueInput
  }

  /**
   * SpotifyAccount updateMany
   */
  export type SpotifyAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpotifyAccounts.
     */
    data: XOR<SpotifyAccountUpdateManyMutationInput, SpotifyAccountUncheckedUpdateManyInput>
    /**
     * Filter which SpotifyAccounts to update
     */
    where?: SpotifyAccountWhereInput
  }

  /**
   * SpotifyAccount upsert
   */
  export type SpotifyAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the SpotifyAccount to update in case it exists.
     */
    where: SpotifyAccountWhereUniqueInput
    /**
     * In case the SpotifyAccount found by the `where` argument doesn't exist, create a new SpotifyAccount with this data.
     */
    create: XOR<SpotifyAccountCreateInput, SpotifyAccountUncheckedCreateInput>
    /**
     * In case the SpotifyAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpotifyAccountUpdateInput, SpotifyAccountUncheckedUpdateInput>
  }

  /**
   * SpotifyAccount delete
   */
  export type SpotifyAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
    /**
     * Filter which SpotifyAccount to delete.
     */
    where: SpotifyAccountWhereUniqueInput
  }

  /**
   * SpotifyAccount deleteMany
   */
  export type SpotifyAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpotifyAccounts to delete
     */
    where?: SpotifyAccountWhereInput
  }

  /**
   * SpotifyAccount without action
   */
  export type SpotifyAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotifyAccount
     */
    select?: SpotifyAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpotifyAccountInclude<ExtArgs> | null
  }


  /**
   * Model Friendship
   */

  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: string | null
    initiatorId: string | null
    receiverId: string | null
    initiatorConfirmed: boolean | null
    receiverConfirmed: boolean | null
    confirmed: boolean | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: string | null
    initiatorId: string | null
    receiverId: string | null
    initiatorConfirmed: boolean | null
    receiverConfirmed: boolean | null
    confirmed: boolean | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    initiatorId: number
    receiverId: number
    initiatorConfirmed: number
    receiverConfirmed: number
    confirmed: number
    _all: number
  }


  export type FriendshipMinAggregateInputType = {
    id?: true
    initiatorId?: true
    receiverId?: true
    initiatorConfirmed?: true
    receiverConfirmed?: true
    confirmed?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    initiatorId?: true
    receiverId?: true
    initiatorConfirmed?: true
    receiverConfirmed?: true
    confirmed?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    initiatorId?: true
    receiverId?: true
    initiatorConfirmed?: true
    receiverConfirmed?: true
    confirmed?: true
    _all?: true
  }

  export type FriendshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendship to aggregate.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithAggregationInput | FriendshipOrderByWithAggregationInput[]
    by: FriendshipScalarFieldEnum[] | FriendshipScalarFieldEnum
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }

  export type FriendshipGroupByOutputType = {
    id: string
    initiatorId: string
    receiverId: string
    initiatorConfirmed: boolean
    receiverConfirmed: boolean
    confirmed: boolean
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initiatorId?: boolean
    receiverId?: boolean
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initiatorId?: boolean
    receiverId?: boolean
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectScalar = {
    id?: boolean
    initiatorId?: boolean
    receiverId?: boolean
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type FriendshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FriendshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Friendship"
    objects: {
      initiator: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      initiatorId: string
      receiverId: string
      initiatorConfirmed: boolean
      receiverConfirmed: boolean
      confirmed: boolean
    }, ExtArgs["result"]["friendship"]>
    composites: {}
  }

  type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipDefaultArgs> = $Result.GetResult<Prisma.$FriendshipPayload, S>

  type FriendshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FriendshipFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface FriendshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friendship'], meta: { name: 'Friendship' } }
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FriendshipFindUniqueArgs>(args: SelectSubset<T, FriendshipFindUniqueArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Friendship that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(args: SelectSubset<T, FriendshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FriendshipFindFirstArgs>(args?: SelectSubset<T, FriendshipFindFirstArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Friendship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FriendshipFindManyArgs>(args?: SelectSubset<T, FriendshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
     */
    create<T extends FriendshipCreateArgs>(args: SelectSubset<T, FriendshipCreateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Friendships.
     * @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FriendshipCreateManyArgs>(args?: SelectSubset<T, FriendshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Friendships and returns the data saved in the database.
     * @param {FriendshipCreateManyAndReturnArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FriendshipCreateManyAndReturnArgs>(args?: SelectSubset<T, FriendshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
     */
    delete<T extends FriendshipDeleteArgs>(args: SelectSubset<T, FriendshipDeleteArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FriendshipUpdateArgs>(args: SelectSubset<T, FriendshipUpdateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FriendshipDeleteManyArgs>(args?: SelectSubset<T, FriendshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FriendshipUpdateManyArgs>(args: SelectSubset<T, FriendshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
     */
    upsert<T extends FriendshipUpsertArgs>(args: SelectSubset<T, FriendshipUpsertArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Friendship model
   */
  readonly fields: FriendshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FriendshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    initiator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Friendship model
   */ 
  interface FriendshipFieldRefs {
    readonly id: FieldRef<"Friendship", 'String'>
    readonly initiatorId: FieldRef<"Friendship", 'String'>
    readonly receiverId: FieldRef<"Friendship", 'String'>
    readonly initiatorConfirmed: FieldRef<"Friendship", 'Boolean'>
    readonly receiverConfirmed: FieldRef<"Friendship", 'Boolean'>
    readonly confirmed: FieldRef<"Friendship", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Friendship findUnique
   */
  export type FriendshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findFirst
   */
  export type FriendshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship create
   */
  export type FriendshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Friendship.
     */
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }

  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Friendship createManyAndReturn
   */
  export type FriendshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Friendship.
     */
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
  }

  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     */
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     */
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }

  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter which Friendship to delete.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipWhereInput
  }

  /**
   * Friendship without action
   */
  export type FriendshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
  }


  /**
   * Model NowListening
   */

  export type AggregateNowListening = {
    _count: NowListeningCountAggregateOutputType | null
    _min: NowListeningMinAggregateOutputType | null
    _max: NowListeningMaxAggregateOutputType | null
  }

  export type NowListeningMinAggregateOutputType = {
    id: string | null
    userId: string | null
    trackId: string | null
  }

  export type NowListeningMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    trackId: string | null
  }

  export type NowListeningCountAggregateOutputType = {
    id: number
    userId: number
    trackId: number
    _all: number
  }


  export type NowListeningMinAggregateInputType = {
    id?: true
    userId?: true
    trackId?: true
  }

  export type NowListeningMaxAggregateInputType = {
    id?: true
    userId?: true
    trackId?: true
  }

  export type NowListeningCountAggregateInputType = {
    id?: true
    userId?: true
    trackId?: true
    _all?: true
  }

  export type NowListeningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NowListening to aggregate.
     */
    where?: NowListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NowListenings to fetch.
     */
    orderBy?: NowListeningOrderByWithRelationInput | NowListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NowListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NowListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NowListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NowListenings
    **/
    _count?: true | NowListeningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NowListeningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NowListeningMaxAggregateInputType
  }

  export type GetNowListeningAggregateType<T extends NowListeningAggregateArgs> = {
        [P in keyof T & keyof AggregateNowListening]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNowListening[P]>
      : GetScalarType<T[P], AggregateNowListening[P]>
  }




  export type NowListeningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NowListeningWhereInput
    orderBy?: NowListeningOrderByWithAggregationInput | NowListeningOrderByWithAggregationInput[]
    by: NowListeningScalarFieldEnum[] | NowListeningScalarFieldEnum
    having?: NowListeningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NowListeningCountAggregateInputType | true
    _min?: NowListeningMinAggregateInputType
    _max?: NowListeningMaxAggregateInputType
  }

  export type NowListeningGroupByOutputType = {
    id: string
    userId: string
    trackId: string
    _count: NowListeningCountAggregateOutputType | null
    _min: NowListeningMinAggregateOutputType | null
    _max: NowListeningMaxAggregateOutputType | null
  }

  type GetNowListeningGroupByPayload<T extends NowListeningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NowListeningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NowListeningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NowListeningGroupByOutputType[P]>
            : GetScalarType<T[P], NowListeningGroupByOutputType[P]>
        }
      >
    >


  export type NowListeningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    trackId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nowListening"]>

  export type NowListeningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    trackId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nowListening"]>

  export type NowListeningSelectScalar = {
    id?: boolean
    userId?: boolean
    trackId?: boolean
  }

  export type NowListeningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NowListeningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NowListeningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NowListening"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      trackId: string
    }, ExtArgs["result"]["nowListening"]>
    composites: {}
  }

  type NowListeningGetPayload<S extends boolean | null | undefined | NowListeningDefaultArgs> = $Result.GetResult<Prisma.$NowListeningPayload, S>

  type NowListeningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NowListeningFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NowListeningCountAggregateInputType | true
    }

  export interface NowListeningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NowListening'], meta: { name: 'NowListening' } }
    /**
     * Find zero or one NowListening that matches the filter.
     * @param {NowListeningFindUniqueArgs} args - Arguments to find a NowListening
     * @example
     * // Get one NowListening
     * const nowListening = await prisma.nowListening.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NowListeningFindUniqueArgs>(args: SelectSubset<T, NowListeningFindUniqueArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NowListening that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NowListeningFindUniqueOrThrowArgs} args - Arguments to find a NowListening
     * @example
     * // Get one NowListening
     * const nowListening = await prisma.nowListening.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NowListeningFindUniqueOrThrowArgs>(args: SelectSubset<T, NowListeningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NowListening that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningFindFirstArgs} args - Arguments to find a NowListening
     * @example
     * // Get one NowListening
     * const nowListening = await prisma.nowListening.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NowListeningFindFirstArgs>(args?: SelectSubset<T, NowListeningFindFirstArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NowListening that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningFindFirstOrThrowArgs} args - Arguments to find a NowListening
     * @example
     * // Get one NowListening
     * const nowListening = await prisma.nowListening.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NowListeningFindFirstOrThrowArgs>(args?: SelectSubset<T, NowListeningFindFirstOrThrowArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NowListenings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NowListenings
     * const nowListenings = await prisma.nowListening.findMany()
     * 
     * // Get first 10 NowListenings
     * const nowListenings = await prisma.nowListening.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nowListeningWithIdOnly = await prisma.nowListening.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NowListeningFindManyArgs>(args?: SelectSubset<T, NowListeningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NowListening.
     * @param {NowListeningCreateArgs} args - Arguments to create a NowListening.
     * @example
     * // Create one NowListening
     * const NowListening = await prisma.nowListening.create({
     *   data: {
     *     // ... data to create a NowListening
     *   }
     * })
     * 
     */
    create<T extends NowListeningCreateArgs>(args: SelectSubset<T, NowListeningCreateArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NowListenings.
     * @param {NowListeningCreateManyArgs} args - Arguments to create many NowListenings.
     * @example
     * // Create many NowListenings
     * const nowListening = await prisma.nowListening.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NowListeningCreateManyArgs>(args?: SelectSubset<T, NowListeningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NowListenings and returns the data saved in the database.
     * @param {NowListeningCreateManyAndReturnArgs} args - Arguments to create many NowListenings.
     * @example
     * // Create many NowListenings
     * const nowListening = await prisma.nowListening.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NowListenings and only return the `id`
     * const nowListeningWithIdOnly = await prisma.nowListening.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NowListeningCreateManyAndReturnArgs>(args?: SelectSubset<T, NowListeningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NowListening.
     * @param {NowListeningDeleteArgs} args - Arguments to delete one NowListening.
     * @example
     * // Delete one NowListening
     * const NowListening = await prisma.nowListening.delete({
     *   where: {
     *     // ... filter to delete one NowListening
     *   }
     * })
     * 
     */
    delete<T extends NowListeningDeleteArgs>(args: SelectSubset<T, NowListeningDeleteArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NowListening.
     * @param {NowListeningUpdateArgs} args - Arguments to update one NowListening.
     * @example
     * // Update one NowListening
     * const nowListening = await prisma.nowListening.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NowListeningUpdateArgs>(args: SelectSubset<T, NowListeningUpdateArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NowListenings.
     * @param {NowListeningDeleteManyArgs} args - Arguments to filter NowListenings to delete.
     * @example
     * // Delete a few NowListenings
     * const { count } = await prisma.nowListening.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NowListeningDeleteManyArgs>(args?: SelectSubset<T, NowListeningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NowListenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NowListenings
     * const nowListening = await prisma.nowListening.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NowListeningUpdateManyArgs>(args: SelectSubset<T, NowListeningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NowListening.
     * @param {NowListeningUpsertArgs} args - Arguments to update or create a NowListening.
     * @example
     * // Update or create a NowListening
     * const nowListening = await prisma.nowListening.upsert({
     *   create: {
     *     // ... data to create a NowListening
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NowListening we want to update
     *   }
     * })
     */
    upsert<T extends NowListeningUpsertArgs>(args: SelectSubset<T, NowListeningUpsertArgs<ExtArgs>>): Prisma__NowListeningClient<$Result.GetResult<Prisma.$NowListeningPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NowListenings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningCountArgs} args - Arguments to filter NowListenings to count.
     * @example
     * // Count the number of NowListenings
     * const count = await prisma.nowListening.count({
     *   where: {
     *     // ... the filter for the NowListenings we want to count
     *   }
     * })
    **/
    count<T extends NowListeningCountArgs>(
      args?: Subset<T, NowListeningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NowListeningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NowListening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NowListeningAggregateArgs>(args: Subset<T, NowListeningAggregateArgs>): Prisma.PrismaPromise<GetNowListeningAggregateType<T>>

    /**
     * Group by NowListening.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NowListeningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NowListeningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NowListeningGroupByArgs['orderBy'] }
        : { orderBy?: NowListeningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NowListeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNowListeningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NowListening model
   */
  readonly fields: NowListeningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NowListening.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NowListeningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NowListening model
   */ 
  interface NowListeningFieldRefs {
    readonly id: FieldRef<"NowListening", 'String'>
    readonly userId: FieldRef<"NowListening", 'String'>
    readonly trackId: FieldRef<"NowListening", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NowListening findUnique
   */
  export type NowListeningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * Filter, which NowListening to fetch.
     */
    where: NowListeningWhereUniqueInput
  }

  /**
   * NowListening findUniqueOrThrow
   */
  export type NowListeningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * Filter, which NowListening to fetch.
     */
    where: NowListeningWhereUniqueInput
  }

  /**
   * NowListening findFirst
   */
  export type NowListeningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * Filter, which NowListening to fetch.
     */
    where?: NowListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NowListenings to fetch.
     */
    orderBy?: NowListeningOrderByWithRelationInput | NowListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NowListenings.
     */
    cursor?: NowListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NowListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NowListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NowListenings.
     */
    distinct?: NowListeningScalarFieldEnum | NowListeningScalarFieldEnum[]
  }

  /**
   * NowListening findFirstOrThrow
   */
  export type NowListeningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * Filter, which NowListening to fetch.
     */
    where?: NowListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NowListenings to fetch.
     */
    orderBy?: NowListeningOrderByWithRelationInput | NowListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NowListenings.
     */
    cursor?: NowListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NowListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NowListenings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NowListenings.
     */
    distinct?: NowListeningScalarFieldEnum | NowListeningScalarFieldEnum[]
  }

  /**
   * NowListening findMany
   */
  export type NowListeningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * Filter, which NowListenings to fetch.
     */
    where?: NowListeningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NowListenings to fetch.
     */
    orderBy?: NowListeningOrderByWithRelationInput | NowListeningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NowListenings.
     */
    cursor?: NowListeningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NowListenings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NowListenings.
     */
    skip?: number
    distinct?: NowListeningScalarFieldEnum | NowListeningScalarFieldEnum[]
  }

  /**
   * NowListening create
   */
  export type NowListeningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * The data needed to create a NowListening.
     */
    data: XOR<NowListeningCreateInput, NowListeningUncheckedCreateInput>
  }

  /**
   * NowListening createMany
   */
  export type NowListeningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NowListenings.
     */
    data: NowListeningCreateManyInput | NowListeningCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NowListening createManyAndReturn
   */
  export type NowListeningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NowListenings.
     */
    data: NowListeningCreateManyInput | NowListeningCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NowListening update
   */
  export type NowListeningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * The data needed to update a NowListening.
     */
    data: XOR<NowListeningUpdateInput, NowListeningUncheckedUpdateInput>
    /**
     * Choose, which NowListening to update.
     */
    where: NowListeningWhereUniqueInput
  }

  /**
   * NowListening updateMany
   */
  export type NowListeningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NowListenings.
     */
    data: XOR<NowListeningUpdateManyMutationInput, NowListeningUncheckedUpdateManyInput>
    /**
     * Filter which NowListenings to update
     */
    where?: NowListeningWhereInput
  }

  /**
   * NowListening upsert
   */
  export type NowListeningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * The filter to search for the NowListening to update in case it exists.
     */
    where: NowListeningWhereUniqueInput
    /**
     * In case the NowListening found by the `where` argument doesn't exist, create a new NowListening with this data.
     */
    create: XOR<NowListeningCreateInput, NowListeningUncheckedCreateInput>
    /**
     * In case the NowListening was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NowListeningUpdateInput, NowListeningUncheckedUpdateInput>
  }

  /**
   * NowListening delete
   */
  export type NowListeningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
    /**
     * Filter which NowListening to delete.
     */
    where: NowListeningWhereUniqueInput
  }

  /**
   * NowListening deleteMany
   */
  export type NowListeningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NowListenings to delete
     */
    where?: NowListeningWhereInput
  }

  /**
   * NowListening without action
   */
  export type NowListeningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NowListening
     */
    select?: NowListeningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NowListeningInclude<ExtArgs> | null
  }


  /**
   * Model TopSongs
   */

  export type AggregateTopSongs = {
    _count: TopSongsCountAggregateOutputType | null
    _min: TopSongsMinAggregateOutputType | null
    _max: TopSongsMaxAggregateOutputType | null
  }

  export type TopSongsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    trackId: string | null
  }

  export type TopSongsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    trackId: string | null
  }

  export type TopSongsCountAggregateOutputType = {
    id: number
    userId: number
    trackId: number
    _all: number
  }


  export type TopSongsMinAggregateInputType = {
    id?: true
    userId?: true
    trackId?: true
  }

  export type TopSongsMaxAggregateInputType = {
    id?: true
    userId?: true
    trackId?: true
  }

  export type TopSongsCountAggregateInputType = {
    id?: true
    userId?: true
    trackId?: true
    _all?: true
  }

  export type TopSongsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopSongs to aggregate.
     */
    where?: TopSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopSongs to fetch.
     */
    orderBy?: TopSongsOrderByWithRelationInput | TopSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TopSongs
    **/
    _count?: true | TopSongsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopSongsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopSongsMaxAggregateInputType
  }

  export type GetTopSongsAggregateType<T extends TopSongsAggregateArgs> = {
        [P in keyof T & keyof AggregateTopSongs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopSongs[P]>
      : GetScalarType<T[P], AggregateTopSongs[P]>
  }




  export type TopSongsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopSongsWhereInput
    orderBy?: TopSongsOrderByWithAggregationInput | TopSongsOrderByWithAggregationInput[]
    by: TopSongsScalarFieldEnum[] | TopSongsScalarFieldEnum
    having?: TopSongsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopSongsCountAggregateInputType | true
    _min?: TopSongsMinAggregateInputType
    _max?: TopSongsMaxAggregateInputType
  }

  export type TopSongsGroupByOutputType = {
    id: string
    userId: string
    trackId: string
    _count: TopSongsCountAggregateOutputType | null
    _min: TopSongsMinAggregateOutputType | null
    _max: TopSongsMaxAggregateOutputType | null
  }

  type GetTopSongsGroupByPayload<T extends TopSongsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopSongsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopSongsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopSongsGroupByOutputType[P]>
            : GetScalarType<T[P], TopSongsGroupByOutputType[P]>
        }
      >
    >


  export type TopSongsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    trackId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topSongs"]>

  export type TopSongsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    trackId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topSongs"]>

  export type TopSongsSelectScalar = {
    id?: boolean
    userId?: boolean
    trackId?: boolean
  }

  export type TopSongsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TopSongsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TopSongsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TopSongs"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      trackId: string
    }, ExtArgs["result"]["topSongs"]>
    composites: {}
  }

  type TopSongsGetPayload<S extends boolean | null | undefined | TopSongsDefaultArgs> = $Result.GetResult<Prisma.$TopSongsPayload, S>

  type TopSongsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TopSongsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TopSongsCountAggregateInputType | true
    }

  export interface TopSongsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TopSongs'], meta: { name: 'TopSongs' } }
    /**
     * Find zero or one TopSongs that matches the filter.
     * @param {TopSongsFindUniqueArgs} args - Arguments to find a TopSongs
     * @example
     * // Get one TopSongs
     * const topSongs = await prisma.topSongs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopSongsFindUniqueArgs>(args: SelectSubset<T, TopSongsFindUniqueArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TopSongs that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TopSongsFindUniqueOrThrowArgs} args - Arguments to find a TopSongs
     * @example
     * // Get one TopSongs
     * const topSongs = await prisma.topSongs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopSongsFindUniqueOrThrowArgs>(args: SelectSubset<T, TopSongsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TopSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsFindFirstArgs} args - Arguments to find a TopSongs
     * @example
     * // Get one TopSongs
     * const topSongs = await prisma.topSongs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopSongsFindFirstArgs>(args?: SelectSubset<T, TopSongsFindFirstArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TopSongs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsFindFirstOrThrowArgs} args - Arguments to find a TopSongs
     * @example
     * // Get one TopSongs
     * const topSongs = await prisma.topSongs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopSongsFindFirstOrThrowArgs>(args?: SelectSubset<T, TopSongsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TopSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TopSongs
     * const topSongs = await prisma.topSongs.findMany()
     * 
     * // Get first 10 TopSongs
     * const topSongs = await prisma.topSongs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topSongsWithIdOnly = await prisma.topSongs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopSongsFindManyArgs>(args?: SelectSubset<T, TopSongsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TopSongs.
     * @param {TopSongsCreateArgs} args - Arguments to create a TopSongs.
     * @example
     * // Create one TopSongs
     * const TopSongs = await prisma.topSongs.create({
     *   data: {
     *     // ... data to create a TopSongs
     *   }
     * })
     * 
     */
    create<T extends TopSongsCreateArgs>(args: SelectSubset<T, TopSongsCreateArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TopSongs.
     * @param {TopSongsCreateManyArgs} args - Arguments to create many TopSongs.
     * @example
     * // Create many TopSongs
     * const topSongs = await prisma.topSongs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopSongsCreateManyArgs>(args?: SelectSubset<T, TopSongsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TopSongs and returns the data saved in the database.
     * @param {TopSongsCreateManyAndReturnArgs} args - Arguments to create many TopSongs.
     * @example
     * // Create many TopSongs
     * const topSongs = await prisma.topSongs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TopSongs and only return the `id`
     * const topSongsWithIdOnly = await prisma.topSongs.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TopSongsCreateManyAndReturnArgs>(args?: SelectSubset<T, TopSongsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TopSongs.
     * @param {TopSongsDeleteArgs} args - Arguments to delete one TopSongs.
     * @example
     * // Delete one TopSongs
     * const TopSongs = await prisma.topSongs.delete({
     *   where: {
     *     // ... filter to delete one TopSongs
     *   }
     * })
     * 
     */
    delete<T extends TopSongsDeleteArgs>(args: SelectSubset<T, TopSongsDeleteArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TopSongs.
     * @param {TopSongsUpdateArgs} args - Arguments to update one TopSongs.
     * @example
     * // Update one TopSongs
     * const topSongs = await prisma.topSongs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopSongsUpdateArgs>(args: SelectSubset<T, TopSongsUpdateArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TopSongs.
     * @param {TopSongsDeleteManyArgs} args - Arguments to filter TopSongs to delete.
     * @example
     * // Delete a few TopSongs
     * const { count } = await prisma.topSongs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopSongsDeleteManyArgs>(args?: SelectSubset<T, TopSongsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TopSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TopSongs
     * const topSongs = await prisma.topSongs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopSongsUpdateManyArgs>(args: SelectSubset<T, TopSongsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TopSongs.
     * @param {TopSongsUpsertArgs} args - Arguments to update or create a TopSongs.
     * @example
     * // Update or create a TopSongs
     * const topSongs = await prisma.topSongs.upsert({
     *   create: {
     *     // ... data to create a TopSongs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TopSongs we want to update
     *   }
     * })
     */
    upsert<T extends TopSongsUpsertArgs>(args: SelectSubset<T, TopSongsUpsertArgs<ExtArgs>>): Prisma__TopSongsClient<$Result.GetResult<Prisma.$TopSongsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TopSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsCountArgs} args - Arguments to filter TopSongs to count.
     * @example
     * // Count the number of TopSongs
     * const count = await prisma.topSongs.count({
     *   where: {
     *     // ... the filter for the TopSongs we want to count
     *   }
     * })
    **/
    count<T extends TopSongsCountArgs>(
      args?: Subset<T, TopSongsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopSongsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TopSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopSongsAggregateArgs>(args: Subset<T, TopSongsAggregateArgs>): Prisma.PrismaPromise<GetTopSongsAggregateType<T>>

    /**
     * Group by TopSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopSongsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopSongsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopSongsGroupByArgs['orderBy'] }
        : { orderBy?: TopSongsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopSongsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopSongsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TopSongs model
   */
  readonly fields: TopSongsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TopSongs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopSongsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TopSongs model
   */ 
  interface TopSongsFieldRefs {
    readonly id: FieldRef<"TopSongs", 'String'>
    readonly userId: FieldRef<"TopSongs", 'String'>
    readonly trackId: FieldRef<"TopSongs", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TopSongs findUnique
   */
  export type TopSongsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * Filter, which TopSongs to fetch.
     */
    where: TopSongsWhereUniqueInput
  }

  /**
   * TopSongs findUniqueOrThrow
   */
  export type TopSongsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * Filter, which TopSongs to fetch.
     */
    where: TopSongsWhereUniqueInput
  }

  /**
   * TopSongs findFirst
   */
  export type TopSongsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * Filter, which TopSongs to fetch.
     */
    where?: TopSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopSongs to fetch.
     */
    orderBy?: TopSongsOrderByWithRelationInput | TopSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopSongs.
     */
    cursor?: TopSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopSongs.
     */
    distinct?: TopSongsScalarFieldEnum | TopSongsScalarFieldEnum[]
  }

  /**
   * TopSongs findFirstOrThrow
   */
  export type TopSongsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * Filter, which TopSongs to fetch.
     */
    where?: TopSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopSongs to fetch.
     */
    orderBy?: TopSongsOrderByWithRelationInput | TopSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopSongs.
     */
    cursor?: TopSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopSongs.
     */
    distinct?: TopSongsScalarFieldEnum | TopSongsScalarFieldEnum[]
  }

  /**
   * TopSongs findMany
   */
  export type TopSongsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * Filter, which TopSongs to fetch.
     */
    where?: TopSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopSongs to fetch.
     */
    orderBy?: TopSongsOrderByWithRelationInput | TopSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TopSongs.
     */
    cursor?: TopSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopSongs.
     */
    skip?: number
    distinct?: TopSongsScalarFieldEnum | TopSongsScalarFieldEnum[]
  }

  /**
   * TopSongs create
   */
  export type TopSongsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * The data needed to create a TopSongs.
     */
    data: XOR<TopSongsCreateInput, TopSongsUncheckedCreateInput>
  }

  /**
   * TopSongs createMany
   */
  export type TopSongsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TopSongs.
     */
    data: TopSongsCreateManyInput | TopSongsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TopSongs createManyAndReturn
   */
  export type TopSongsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TopSongs.
     */
    data: TopSongsCreateManyInput | TopSongsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TopSongs update
   */
  export type TopSongsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * The data needed to update a TopSongs.
     */
    data: XOR<TopSongsUpdateInput, TopSongsUncheckedUpdateInput>
    /**
     * Choose, which TopSongs to update.
     */
    where: TopSongsWhereUniqueInput
  }

  /**
   * TopSongs updateMany
   */
  export type TopSongsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TopSongs.
     */
    data: XOR<TopSongsUpdateManyMutationInput, TopSongsUncheckedUpdateManyInput>
    /**
     * Filter which TopSongs to update
     */
    where?: TopSongsWhereInput
  }

  /**
   * TopSongs upsert
   */
  export type TopSongsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * The filter to search for the TopSongs to update in case it exists.
     */
    where: TopSongsWhereUniqueInput
    /**
     * In case the TopSongs found by the `where` argument doesn't exist, create a new TopSongs with this data.
     */
    create: XOR<TopSongsCreateInput, TopSongsUncheckedCreateInput>
    /**
     * In case the TopSongs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopSongsUpdateInput, TopSongsUncheckedUpdateInput>
  }

  /**
   * TopSongs delete
   */
  export type TopSongsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
    /**
     * Filter which TopSongs to delete.
     */
    where: TopSongsWhereUniqueInput
  }

  /**
   * TopSongs deleteMany
   */
  export type TopSongsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopSongs to delete
     */
    where?: TopSongsWhereInput
  }

  /**
   * TopSongs without action
   */
  export type TopSongsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopSongs
     */
    select?: TopSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopSongsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    password: 'password',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SpotifyAccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    spotifyId: 'spotifyId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken'
  };

  export type SpotifyAccountScalarFieldEnum = (typeof SpotifyAccountScalarFieldEnum)[keyof typeof SpotifyAccountScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    initiatorId: 'initiatorId',
    receiverId: 'receiverId',
    initiatorConfirmed: 'initiatorConfirmed',
    receiverConfirmed: 'receiverConfirmed',
    confirmed: 'confirmed'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const NowListeningScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    trackId: 'trackId'
  };

  export type NowListeningScalarFieldEnum = (typeof NowListeningScalarFieldEnum)[keyof typeof NowListeningScalarFieldEnum]


  export const TopSongsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    trackId: 'trackId'
  };

  export type TopSongsScalarFieldEnum = (typeof TopSongsScalarFieldEnum)[keyof typeof TopSongsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    spotifyAccount?: XOR<SpotifyAccountNullableRelationFilter, SpotifyAccountWhereInput> | null
    nowListening?: NowListeningListRelationFilter
    initiatedFriendships?: FriendshipListRelationFilter
    receivedFriendships?: FriendshipListRelationFilter
    topSongs?: TopSongsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    spotifyAccount?: SpotifyAccountOrderByWithRelationInput
    nowListening?: NowListeningOrderByRelationAggregateInput
    initiatedFriendships?: FriendshipOrderByRelationAggregateInput
    receivedFriendships?: FriendshipOrderByRelationAggregateInput
    topSongs?: TopSongsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    spotifyAccount?: XOR<SpotifyAccountNullableRelationFilter, SpotifyAccountWhereInput> | null
    nowListening?: NowListeningListRelationFilter
    initiatedFriendships?: FriendshipListRelationFilter
    receivedFriendships?: FriendshipListRelationFilter
    topSongs?: TopSongsListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
  }

  export type SpotifyAccountWhereInput = {
    AND?: SpotifyAccountWhereInput | SpotifyAccountWhereInput[]
    OR?: SpotifyAccountWhereInput[]
    NOT?: SpotifyAccountWhereInput | SpotifyAccountWhereInput[]
    id?: StringFilter<"SpotifyAccount"> | string
    userId?: StringFilter<"SpotifyAccount"> | string
    spotifyId?: StringFilter<"SpotifyAccount"> | string
    accessToken?: StringFilter<"SpotifyAccount"> | string
    refreshToken?: StringFilter<"SpotifyAccount"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SpotifyAccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    spotifyId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SpotifyAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: SpotifyAccountWhereInput | SpotifyAccountWhereInput[]
    OR?: SpotifyAccountWhereInput[]
    NOT?: SpotifyAccountWhereInput | SpotifyAccountWhereInput[]
    spotifyId?: StringFilter<"SpotifyAccount"> | string
    accessToken?: StringFilter<"SpotifyAccount"> | string
    refreshToken?: StringFilter<"SpotifyAccount"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type SpotifyAccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    spotifyId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    _count?: SpotifyAccountCountOrderByAggregateInput
    _max?: SpotifyAccountMaxOrderByAggregateInput
    _min?: SpotifyAccountMinOrderByAggregateInput
  }

  export type SpotifyAccountScalarWhereWithAggregatesInput = {
    AND?: SpotifyAccountScalarWhereWithAggregatesInput | SpotifyAccountScalarWhereWithAggregatesInput[]
    OR?: SpotifyAccountScalarWhereWithAggregatesInput[]
    NOT?: SpotifyAccountScalarWhereWithAggregatesInput | SpotifyAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SpotifyAccount"> | string
    userId?: StringWithAggregatesFilter<"SpotifyAccount"> | string
    spotifyId?: StringWithAggregatesFilter<"SpotifyAccount"> | string
    accessToken?: StringWithAggregatesFilter<"SpotifyAccount"> | string
    refreshToken?: StringWithAggregatesFilter<"SpotifyAccount"> | string
  }

  export type FriendshipWhereInput = {
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    id?: StringFilter<"Friendship"> | string
    initiatorId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    initiatorConfirmed?: BoolFilter<"Friendship"> | boolean
    receiverConfirmed?: BoolFilter<"Friendship"> | boolean
    confirmed?: BoolFilter<"Friendship"> | boolean
    initiator?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    initiatorConfirmed?: SortOrder
    receiverConfirmed?: SortOrder
    confirmed?: SortOrder
    initiator?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    initiatorId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    initiatorConfirmed?: BoolFilter<"Friendship"> | boolean
    receiverConfirmed?: BoolFilter<"Friendship"> | boolean
    confirmed?: BoolFilter<"Friendship"> | boolean
    initiator?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    initiatorConfirmed?: SortOrder
    receiverConfirmed?: SortOrder
    confirmed?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    OR?: FriendshipScalarWhereWithAggregatesInput[]
    NOT?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Friendship"> | string
    initiatorId?: StringWithAggregatesFilter<"Friendship"> | string
    receiverId?: StringWithAggregatesFilter<"Friendship"> | string
    initiatorConfirmed?: BoolWithAggregatesFilter<"Friendship"> | boolean
    receiverConfirmed?: BoolWithAggregatesFilter<"Friendship"> | boolean
    confirmed?: BoolWithAggregatesFilter<"Friendship"> | boolean
  }

  export type NowListeningWhereInput = {
    AND?: NowListeningWhereInput | NowListeningWhereInput[]
    OR?: NowListeningWhereInput[]
    NOT?: NowListeningWhereInput | NowListeningWhereInput[]
    id?: StringFilter<"NowListening"> | string
    userId?: StringFilter<"NowListening"> | string
    trackId?: StringFilter<"NowListening"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NowListeningOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NowListeningWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NowListeningWhereInput | NowListeningWhereInput[]
    OR?: NowListeningWhereInput[]
    NOT?: NowListeningWhereInput | NowListeningWhereInput[]
    userId?: StringFilter<"NowListening"> | string
    trackId?: StringFilter<"NowListening"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NowListeningOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    _count?: NowListeningCountOrderByAggregateInput
    _max?: NowListeningMaxOrderByAggregateInput
    _min?: NowListeningMinOrderByAggregateInput
  }

  export type NowListeningScalarWhereWithAggregatesInput = {
    AND?: NowListeningScalarWhereWithAggregatesInput | NowListeningScalarWhereWithAggregatesInput[]
    OR?: NowListeningScalarWhereWithAggregatesInput[]
    NOT?: NowListeningScalarWhereWithAggregatesInput | NowListeningScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NowListening"> | string
    userId?: StringWithAggregatesFilter<"NowListening"> | string
    trackId?: StringWithAggregatesFilter<"NowListening"> | string
  }

  export type TopSongsWhereInput = {
    AND?: TopSongsWhereInput | TopSongsWhereInput[]
    OR?: TopSongsWhereInput[]
    NOT?: TopSongsWhereInput | TopSongsWhereInput[]
    id?: StringFilter<"TopSongs"> | string
    userId?: StringFilter<"TopSongs"> | string
    trackId?: StringFilter<"TopSongs"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TopSongsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TopSongsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TopSongsWhereInput | TopSongsWhereInput[]
    OR?: TopSongsWhereInput[]
    NOT?: TopSongsWhereInput | TopSongsWhereInput[]
    userId?: StringFilter<"TopSongs"> | string
    trackId?: StringFilter<"TopSongs"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TopSongsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    _count?: TopSongsCountOrderByAggregateInput
    _max?: TopSongsMaxOrderByAggregateInput
    _min?: TopSongsMinOrderByAggregateInput
  }

  export type TopSongsScalarWhereWithAggregatesInput = {
    AND?: TopSongsScalarWhereWithAggregatesInput | TopSongsScalarWhereWithAggregatesInput[]
    OR?: TopSongsScalarWhereWithAggregatesInput[]
    NOT?: TopSongsScalarWhereWithAggregatesInput | TopSongsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TopSongs"> | string
    userId?: StringWithAggregatesFilter<"TopSongs"> | string
    trackId?: StringWithAggregatesFilter<"TopSongs"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountCreateNestedOneWithoutUserInput
    nowListening?: NowListeningCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountUncheckedCreateNestedOneWithoutUserInput
    nowListening?: NowListeningUncheckedCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUncheckedUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUncheckedUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type SpotifyAccountCreateInput = {
    id?: string
    spotifyId: string
    accessToken: string
    refreshToken: string
    user: UserCreateNestedOneWithoutSpotifyAccountInput
  }

  export type SpotifyAccountUncheckedCreateInput = {
    id?: string
    userId: string
    spotifyId: string
    accessToken: string
    refreshToken: string
  }

  export type SpotifyAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    spotifyId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSpotifyAccountNestedInput
  }

  export type SpotifyAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    spotifyId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type SpotifyAccountCreateManyInput = {
    id?: string
    userId: string
    spotifyId: string
    accessToken: string
    refreshToken: string
  }

  export type SpotifyAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    spotifyId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type SpotifyAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    spotifyId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipCreateInput = {
    id?: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
    initiator: UserCreateNestedOneWithoutInitiatedFriendshipsInput
    receiver: UserCreateNestedOneWithoutReceivedFriendshipsInput
  }

  export type FriendshipUncheckedCreateInput = {
    id?: string
    initiatorId: string
    receiverId: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type FriendshipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    initiator?: UserUpdateOneRequiredWithoutInitiatedFriendshipsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedFriendshipsNestedInput
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipCreateManyInput = {
    id?: string
    initiatorId: string
    receiverId: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type FriendshipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NowListeningCreateInput = {
    id?: string
    trackId: string
    user: UserCreateNestedOneWithoutNowListeningInput
  }

  export type NowListeningUncheckedCreateInput = {
    id?: string
    userId: string
    trackId: string
  }

  export type NowListeningUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutNowListeningNestedInput
  }

  export type NowListeningUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type NowListeningCreateManyInput = {
    id?: string
    userId: string
    trackId: string
  }

  export type NowListeningUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type NowListeningUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TopSongsCreateInput = {
    id?: string
    trackId: string
    user: UserCreateNestedOneWithoutTopSongsInput
  }

  export type TopSongsUncheckedCreateInput = {
    id?: string
    userId: string
    trackId: string
  }

  export type TopSongsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTopSongsNestedInput
  }

  export type TopSongsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TopSongsCreateManyInput = {
    id?: string
    userId: string
    trackId: string
  }

  export type TopSongsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TopSongsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SpotifyAccountNullableRelationFilter = {
    is?: SpotifyAccountWhereInput | null
    isNot?: SpotifyAccountWhereInput | null
  }

  export type NowListeningListRelationFilter = {
    every?: NowListeningWhereInput
    some?: NowListeningWhereInput
    none?: NowListeningWhereInput
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type TopSongsListRelationFilter = {
    every?: TopSongsWhereInput
    some?: TopSongsWhereInput
    none?: TopSongsWhereInput
  }

  export type NowListeningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TopSongsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SpotifyAccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    spotifyId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
  }

  export type SpotifyAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    spotifyId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
  }

  export type SpotifyAccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    spotifyId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    initiatorConfirmed?: SortOrder
    receiverConfirmed?: SortOrder
    confirmed?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    initiatorConfirmed?: SortOrder
    receiverConfirmed?: SortOrder
    confirmed?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    initiatorId?: SortOrder
    receiverId?: SortOrder
    initiatorConfirmed?: SortOrder
    receiverConfirmed?: SortOrder
    confirmed?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NowListeningCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
  }

  export type NowListeningMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
  }

  export type NowListeningMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
  }

  export type TopSongsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
  }

  export type TopSongsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
  }

  export type TopSongsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
  }

  export type SpotifyAccountCreateNestedOneWithoutUserInput = {
    create?: XOR<SpotifyAccountCreateWithoutUserInput, SpotifyAccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: SpotifyAccountCreateOrConnectWithoutUserInput
    connect?: SpotifyAccountWhereUniqueInput
  }

  export type NowListeningCreateNestedManyWithoutUserInput = {
    create?: XOR<NowListeningCreateWithoutUserInput, NowListeningUncheckedCreateWithoutUserInput> | NowListeningCreateWithoutUserInput[] | NowListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NowListeningCreateOrConnectWithoutUserInput | NowListeningCreateOrConnectWithoutUserInput[]
    createMany?: NowListeningCreateManyUserInputEnvelope
    connect?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutInitiatorInput = {
    create?: XOR<FriendshipCreateWithoutInitiatorInput, FriendshipUncheckedCreateWithoutInitiatorInput> | FriendshipCreateWithoutInitiatorInput[] | FriendshipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutInitiatorInput | FriendshipCreateOrConnectWithoutInitiatorInput[]
    createMany?: FriendshipCreateManyInitiatorInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type TopSongsCreateNestedManyWithoutUserInput = {
    create?: XOR<TopSongsCreateWithoutUserInput, TopSongsUncheckedCreateWithoutUserInput> | TopSongsCreateWithoutUserInput[] | TopSongsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopSongsCreateOrConnectWithoutUserInput | TopSongsCreateOrConnectWithoutUserInput[]
    createMany?: TopSongsCreateManyUserInputEnvelope
    connect?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
  }

  export type SpotifyAccountUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SpotifyAccountCreateWithoutUserInput, SpotifyAccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: SpotifyAccountCreateOrConnectWithoutUserInput
    connect?: SpotifyAccountWhereUniqueInput
  }

  export type NowListeningUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NowListeningCreateWithoutUserInput, NowListeningUncheckedCreateWithoutUserInput> | NowListeningCreateWithoutUserInput[] | NowListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NowListeningCreateOrConnectWithoutUserInput | NowListeningCreateOrConnectWithoutUserInput[]
    createMany?: NowListeningCreateManyUserInputEnvelope
    connect?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutInitiatorInput = {
    create?: XOR<FriendshipCreateWithoutInitiatorInput, FriendshipUncheckedCreateWithoutInitiatorInput> | FriendshipCreateWithoutInitiatorInput[] | FriendshipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutInitiatorInput | FriendshipCreateOrConnectWithoutInitiatorInput[]
    createMany?: FriendshipCreateManyInitiatorInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type TopSongsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TopSongsCreateWithoutUserInput, TopSongsUncheckedCreateWithoutUserInput> | TopSongsCreateWithoutUserInput[] | TopSongsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopSongsCreateOrConnectWithoutUserInput | TopSongsCreateOrConnectWithoutUserInput[]
    createMany?: TopSongsCreateManyUserInputEnvelope
    connect?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SpotifyAccountUpdateOneWithoutUserNestedInput = {
    create?: XOR<SpotifyAccountCreateWithoutUserInput, SpotifyAccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: SpotifyAccountCreateOrConnectWithoutUserInput
    upsert?: SpotifyAccountUpsertWithoutUserInput
    disconnect?: SpotifyAccountWhereInput | boolean
    delete?: SpotifyAccountWhereInput | boolean
    connect?: SpotifyAccountWhereUniqueInput
    update?: XOR<XOR<SpotifyAccountUpdateToOneWithWhereWithoutUserInput, SpotifyAccountUpdateWithoutUserInput>, SpotifyAccountUncheckedUpdateWithoutUserInput>
  }

  export type NowListeningUpdateManyWithoutUserNestedInput = {
    create?: XOR<NowListeningCreateWithoutUserInput, NowListeningUncheckedCreateWithoutUserInput> | NowListeningCreateWithoutUserInput[] | NowListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NowListeningCreateOrConnectWithoutUserInput | NowListeningCreateOrConnectWithoutUserInput[]
    upsert?: NowListeningUpsertWithWhereUniqueWithoutUserInput | NowListeningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NowListeningCreateManyUserInputEnvelope
    set?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    disconnect?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    delete?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    connect?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    update?: NowListeningUpdateWithWhereUniqueWithoutUserInput | NowListeningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NowListeningUpdateManyWithWhereWithoutUserInput | NowListeningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NowListeningScalarWhereInput | NowListeningScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutInitiatorNestedInput = {
    create?: XOR<FriendshipCreateWithoutInitiatorInput, FriendshipUncheckedCreateWithoutInitiatorInput> | FriendshipCreateWithoutInitiatorInput[] | FriendshipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutInitiatorInput | FriendshipCreateOrConnectWithoutInitiatorInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutInitiatorInput | FriendshipUpsertWithWhereUniqueWithoutInitiatorInput[]
    createMany?: FriendshipCreateManyInitiatorInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutInitiatorInput | FriendshipUpdateWithWhereUniqueWithoutInitiatorInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutInitiatorInput | FriendshipUpdateManyWithWhereWithoutInitiatorInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutReceiverInput | FriendshipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutReceiverInput | FriendshipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutReceiverInput | FriendshipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type TopSongsUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopSongsCreateWithoutUserInput, TopSongsUncheckedCreateWithoutUserInput> | TopSongsCreateWithoutUserInput[] | TopSongsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopSongsCreateOrConnectWithoutUserInput | TopSongsCreateOrConnectWithoutUserInput[]
    upsert?: TopSongsUpsertWithWhereUniqueWithoutUserInput | TopSongsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopSongsCreateManyUserInputEnvelope
    set?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    disconnect?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    delete?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    connect?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    update?: TopSongsUpdateWithWhereUniqueWithoutUserInput | TopSongsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopSongsUpdateManyWithWhereWithoutUserInput | TopSongsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopSongsScalarWhereInput | TopSongsScalarWhereInput[]
  }

  export type SpotifyAccountUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SpotifyAccountCreateWithoutUserInput, SpotifyAccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: SpotifyAccountCreateOrConnectWithoutUserInput
    upsert?: SpotifyAccountUpsertWithoutUserInput
    disconnect?: SpotifyAccountWhereInput | boolean
    delete?: SpotifyAccountWhereInput | boolean
    connect?: SpotifyAccountWhereUniqueInput
    update?: XOR<XOR<SpotifyAccountUpdateToOneWithWhereWithoutUserInput, SpotifyAccountUpdateWithoutUserInput>, SpotifyAccountUncheckedUpdateWithoutUserInput>
  }

  export type NowListeningUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NowListeningCreateWithoutUserInput, NowListeningUncheckedCreateWithoutUserInput> | NowListeningCreateWithoutUserInput[] | NowListeningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NowListeningCreateOrConnectWithoutUserInput | NowListeningCreateOrConnectWithoutUserInput[]
    upsert?: NowListeningUpsertWithWhereUniqueWithoutUserInput | NowListeningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NowListeningCreateManyUserInputEnvelope
    set?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    disconnect?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    delete?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    connect?: NowListeningWhereUniqueInput | NowListeningWhereUniqueInput[]
    update?: NowListeningUpdateWithWhereUniqueWithoutUserInput | NowListeningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NowListeningUpdateManyWithWhereWithoutUserInput | NowListeningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NowListeningScalarWhereInput | NowListeningScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutInitiatorNestedInput = {
    create?: XOR<FriendshipCreateWithoutInitiatorInput, FriendshipUncheckedCreateWithoutInitiatorInput> | FriendshipCreateWithoutInitiatorInput[] | FriendshipUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutInitiatorInput | FriendshipCreateOrConnectWithoutInitiatorInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutInitiatorInput | FriendshipUpsertWithWhereUniqueWithoutInitiatorInput[]
    createMany?: FriendshipCreateManyInitiatorInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutInitiatorInput | FriendshipUpdateWithWhereUniqueWithoutInitiatorInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutInitiatorInput | FriendshipUpdateManyWithWhereWithoutInitiatorInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput> | FriendshipCreateWithoutReceiverInput[] | FriendshipUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutReceiverInput | FriendshipCreateOrConnectWithoutReceiverInput[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutReceiverInput | FriendshipUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: FriendshipCreateManyReceiverInputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutReceiverInput | FriendshipUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutReceiverInput | FriendshipUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type TopSongsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopSongsCreateWithoutUserInput, TopSongsUncheckedCreateWithoutUserInput> | TopSongsCreateWithoutUserInput[] | TopSongsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopSongsCreateOrConnectWithoutUserInput | TopSongsCreateOrConnectWithoutUserInput[]
    upsert?: TopSongsUpsertWithWhereUniqueWithoutUserInput | TopSongsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopSongsCreateManyUserInputEnvelope
    set?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    disconnect?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    delete?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    connect?: TopSongsWhereUniqueInput | TopSongsWhereUniqueInput[]
    update?: TopSongsUpdateWithWhereUniqueWithoutUserInput | TopSongsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopSongsUpdateManyWithWhereWithoutUserInput | TopSongsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopSongsScalarWhereInput | TopSongsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSpotifyAccountInput = {
    create?: XOR<UserCreateWithoutSpotifyAccountInput, UserUncheckedCreateWithoutSpotifyAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpotifyAccountInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSpotifyAccountNestedInput = {
    create?: XOR<UserCreateWithoutSpotifyAccountInput, UserUncheckedCreateWithoutSpotifyAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpotifyAccountInput
    upsert?: UserUpsertWithoutSpotifyAccountInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSpotifyAccountInput, UserUpdateWithoutSpotifyAccountInput>, UserUncheckedUpdateWithoutSpotifyAccountInput>
  }

  export type UserCreateNestedOneWithoutInitiatedFriendshipsInput = {
    create?: XOR<UserCreateWithoutInitiatedFriendshipsInput, UserUncheckedCreateWithoutInitiatedFriendshipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedFriendshipsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedFriendshipsInput = {
    create?: XOR<UserCreateWithoutReceivedFriendshipsInput, UserUncheckedCreateWithoutReceivedFriendshipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFriendshipsInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutInitiatedFriendshipsNestedInput = {
    create?: XOR<UserCreateWithoutInitiatedFriendshipsInput, UserUncheckedCreateWithoutInitiatedFriendshipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedFriendshipsInput
    upsert?: UserUpsertWithoutInitiatedFriendshipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInitiatedFriendshipsInput, UserUpdateWithoutInitiatedFriendshipsInput>, UserUncheckedUpdateWithoutInitiatedFriendshipsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedFriendshipsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedFriendshipsInput, UserUncheckedCreateWithoutReceivedFriendshipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedFriendshipsInput
    upsert?: UserUpsertWithoutReceivedFriendshipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedFriendshipsInput, UserUpdateWithoutReceivedFriendshipsInput>, UserUncheckedUpdateWithoutReceivedFriendshipsInput>
  }

  export type UserCreateNestedOneWithoutNowListeningInput = {
    create?: XOR<UserCreateWithoutNowListeningInput, UserUncheckedCreateWithoutNowListeningInput>
    connectOrCreate?: UserCreateOrConnectWithoutNowListeningInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNowListeningNestedInput = {
    create?: XOR<UserCreateWithoutNowListeningInput, UserUncheckedCreateWithoutNowListeningInput>
    connectOrCreate?: UserCreateOrConnectWithoutNowListeningInput
    upsert?: UserUpsertWithoutNowListeningInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNowListeningInput, UserUpdateWithoutNowListeningInput>, UserUncheckedUpdateWithoutNowListeningInput>
  }

  export type UserCreateNestedOneWithoutTopSongsInput = {
    create?: XOR<UserCreateWithoutTopSongsInput, UserUncheckedCreateWithoutTopSongsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopSongsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTopSongsNestedInput = {
    create?: XOR<UserCreateWithoutTopSongsInput, UserUncheckedCreateWithoutTopSongsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopSongsInput
    upsert?: UserUpsertWithoutTopSongsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTopSongsInput, UserUpdateWithoutTopSongsInput>, UserUncheckedUpdateWithoutTopSongsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SpotifyAccountCreateWithoutUserInput = {
    id?: string
    spotifyId: string
    accessToken: string
    refreshToken: string
  }

  export type SpotifyAccountUncheckedCreateWithoutUserInput = {
    id?: string
    spotifyId: string
    accessToken: string
    refreshToken: string
  }

  export type SpotifyAccountCreateOrConnectWithoutUserInput = {
    where: SpotifyAccountWhereUniqueInput
    create: XOR<SpotifyAccountCreateWithoutUserInput, SpotifyAccountUncheckedCreateWithoutUserInput>
  }

  export type NowListeningCreateWithoutUserInput = {
    id?: string
    trackId: string
  }

  export type NowListeningUncheckedCreateWithoutUserInput = {
    id?: string
    trackId: string
  }

  export type NowListeningCreateOrConnectWithoutUserInput = {
    where: NowListeningWhereUniqueInput
    create: XOR<NowListeningCreateWithoutUserInput, NowListeningUncheckedCreateWithoutUserInput>
  }

  export type NowListeningCreateManyUserInputEnvelope = {
    data: NowListeningCreateManyUserInput | NowListeningCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutInitiatorInput = {
    id?: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
    receiver: UserCreateNestedOneWithoutReceivedFriendshipsInput
  }

  export type FriendshipUncheckedCreateWithoutInitiatorInput = {
    id?: string
    receiverId: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type FriendshipCreateOrConnectWithoutInitiatorInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutInitiatorInput, FriendshipUncheckedCreateWithoutInitiatorInput>
  }

  export type FriendshipCreateManyInitiatorInputEnvelope = {
    data: FriendshipCreateManyInitiatorInput | FriendshipCreateManyInitiatorInput[]
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutReceiverInput = {
    id?: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
    initiator: UserCreateNestedOneWithoutInitiatedFriendshipsInput
  }

  export type FriendshipUncheckedCreateWithoutReceiverInput = {
    id?: string
    initiatorId: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type FriendshipCreateOrConnectWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput>
  }

  export type FriendshipCreateManyReceiverInputEnvelope = {
    data: FriendshipCreateManyReceiverInput | FriendshipCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type TopSongsCreateWithoutUserInput = {
    id?: string
    trackId: string
  }

  export type TopSongsUncheckedCreateWithoutUserInput = {
    id?: string
    trackId: string
  }

  export type TopSongsCreateOrConnectWithoutUserInput = {
    where: TopSongsWhereUniqueInput
    create: XOR<TopSongsCreateWithoutUserInput, TopSongsUncheckedCreateWithoutUserInput>
  }

  export type TopSongsCreateManyUserInputEnvelope = {
    data: TopSongsCreateManyUserInput | TopSongsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SpotifyAccountUpsertWithoutUserInput = {
    update: XOR<SpotifyAccountUpdateWithoutUserInput, SpotifyAccountUncheckedUpdateWithoutUserInput>
    create: XOR<SpotifyAccountCreateWithoutUserInput, SpotifyAccountUncheckedCreateWithoutUserInput>
    where?: SpotifyAccountWhereInput
  }

  export type SpotifyAccountUpdateToOneWithWhereWithoutUserInput = {
    where?: SpotifyAccountWhereInput
    data: XOR<SpotifyAccountUpdateWithoutUserInput, SpotifyAccountUncheckedUpdateWithoutUserInput>
  }

  export type SpotifyAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    spotifyId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type SpotifyAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    spotifyId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type NowListeningUpsertWithWhereUniqueWithoutUserInput = {
    where: NowListeningWhereUniqueInput
    update: XOR<NowListeningUpdateWithoutUserInput, NowListeningUncheckedUpdateWithoutUserInput>
    create: XOR<NowListeningCreateWithoutUserInput, NowListeningUncheckedCreateWithoutUserInput>
  }

  export type NowListeningUpdateWithWhereUniqueWithoutUserInput = {
    where: NowListeningWhereUniqueInput
    data: XOR<NowListeningUpdateWithoutUserInput, NowListeningUncheckedUpdateWithoutUserInput>
  }

  export type NowListeningUpdateManyWithWhereWithoutUserInput = {
    where: NowListeningScalarWhereInput
    data: XOR<NowListeningUpdateManyMutationInput, NowListeningUncheckedUpdateManyWithoutUserInput>
  }

  export type NowListeningScalarWhereInput = {
    AND?: NowListeningScalarWhereInput | NowListeningScalarWhereInput[]
    OR?: NowListeningScalarWhereInput[]
    NOT?: NowListeningScalarWhereInput | NowListeningScalarWhereInput[]
    id?: StringFilter<"NowListening"> | string
    userId?: StringFilter<"NowListening"> | string
    trackId?: StringFilter<"NowListening"> | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutInitiatorInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutInitiatorInput, FriendshipUncheckedUpdateWithoutInitiatorInput>
    create: XOR<FriendshipCreateWithoutInitiatorInput, FriendshipUncheckedCreateWithoutInitiatorInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutInitiatorInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutInitiatorInput, FriendshipUncheckedUpdateWithoutInitiatorInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutInitiatorInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutInitiatorInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    OR?: FriendshipScalarWhereInput[]
    NOT?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    id?: StringFilter<"Friendship"> | string
    initiatorId?: StringFilter<"Friendship"> | string
    receiverId?: StringFilter<"Friendship"> | string
    initiatorConfirmed?: BoolFilter<"Friendship"> | boolean
    receiverConfirmed?: BoolFilter<"Friendship"> | boolean
    confirmed?: BoolFilter<"Friendship"> | boolean
  }

  export type FriendshipUpsertWithWhereUniqueWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutReceiverInput, FriendshipUncheckedUpdateWithoutReceiverInput>
    create: XOR<FriendshipCreateWithoutReceiverInput, FriendshipUncheckedCreateWithoutReceiverInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutReceiverInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutReceiverInput, FriendshipUncheckedUpdateWithoutReceiverInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutReceiverInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutReceiverInput>
  }

  export type TopSongsUpsertWithWhereUniqueWithoutUserInput = {
    where: TopSongsWhereUniqueInput
    update: XOR<TopSongsUpdateWithoutUserInput, TopSongsUncheckedUpdateWithoutUserInput>
    create: XOR<TopSongsCreateWithoutUserInput, TopSongsUncheckedCreateWithoutUserInput>
  }

  export type TopSongsUpdateWithWhereUniqueWithoutUserInput = {
    where: TopSongsWhereUniqueInput
    data: XOR<TopSongsUpdateWithoutUserInput, TopSongsUncheckedUpdateWithoutUserInput>
  }

  export type TopSongsUpdateManyWithWhereWithoutUserInput = {
    where: TopSongsScalarWhereInput
    data: XOR<TopSongsUpdateManyMutationInput, TopSongsUncheckedUpdateManyWithoutUserInput>
  }

  export type TopSongsScalarWhereInput = {
    AND?: TopSongsScalarWhereInput | TopSongsScalarWhereInput[]
    OR?: TopSongsScalarWhereInput[]
    NOT?: TopSongsScalarWhereInput | TopSongsScalarWhereInput[]
    id?: StringFilter<"TopSongs"> | string
    userId?: StringFilter<"TopSongs"> | string
    trackId?: StringFilter<"TopSongs"> | string
  }

  export type UserCreateWithoutSpotifyAccountInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    nowListening?: NowListeningCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSpotifyAccountInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    nowListening?: NowListeningUncheckedCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSpotifyAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpotifyAccountInput, UserUncheckedCreateWithoutSpotifyAccountInput>
  }

  export type UserUpsertWithoutSpotifyAccountInput = {
    update: XOR<UserUpdateWithoutSpotifyAccountInput, UserUncheckedUpdateWithoutSpotifyAccountInput>
    create: XOR<UserCreateWithoutSpotifyAccountInput, UserUncheckedCreateWithoutSpotifyAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSpotifyAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSpotifyAccountInput, UserUncheckedUpdateWithoutSpotifyAccountInput>
  }

  export type UserUpdateWithoutSpotifyAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nowListening?: NowListeningUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSpotifyAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nowListening?: NowListeningUncheckedUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutInitiatedFriendshipsInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountCreateNestedOneWithoutUserInput
    nowListening?: NowListeningCreateNestedManyWithoutUserInput
    receivedFriendships?: FriendshipCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInitiatedFriendshipsInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountUncheckedCreateNestedOneWithoutUserInput
    nowListening?: NowListeningUncheckedCreateNestedManyWithoutUserInput
    receivedFriendships?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInitiatedFriendshipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInitiatedFriendshipsInput, UserUncheckedCreateWithoutInitiatedFriendshipsInput>
  }

  export type UserCreateWithoutReceivedFriendshipsInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountCreateNestedOneWithoutUserInput
    nowListening?: NowListeningCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipCreateNestedManyWithoutInitiatorInput
    topSongs?: TopSongsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedFriendshipsInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountUncheckedCreateNestedOneWithoutUserInput
    nowListening?: NowListeningUncheckedCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipUncheckedCreateNestedManyWithoutInitiatorInput
    topSongs?: TopSongsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedFriendshipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedFriendshipsInput, UserUncheckedCreateWithoutReceivedFriendshipsInput>
  }

  export type UserUpsertWithoutInitiatedFriendshipsInput = {
    update: XOR<UserUpdateWithoutInitiatedFriendshipsInput, UserUncheckedUpdateWithoutInitiatedFriendshipsInput>
    create: XOR<UserCreateWithoutInitiatedFriendshipsInput, UserUncheckedCreateWithoutInitiatedFriendshipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInitiatedFriendshipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInitiatedFriendshipsInput, UserUncheckedUpdateWithoutInitiatedFriendshipsInput>
  }

  export type UserUpdateWithoutInitiatedFriendshipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUpdateManyWithoutUserNestedInput
    receivedFriendships?: FriendshipUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInitiatedFriendshipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUncheckedUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUncheckedUpdateManyWithoutUserNestedInput
    receivedFriendships?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedFriendshipsInput = {
    update: XOR<UserUpdateWithoutReceivedFriendshipsInput, UserUncheckedUpdateWithoutReceivedFriendshipsInput>
    create: XOR<UserCreateWithoutReceivedFriendshipsInput, UserUncheckedCreateWithoutReceivedFriendshipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedFriendshipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedFriendshipsInput, UserUncheckedUpdateWithoutReceivedFriendshipsInput>
  }

  export type UserUpdateWithoutReceivedFriendshipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUpdateManyWithoutInitiatorNestedInput
    topSongs?: TopSongsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedFriendshipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUncheckedUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUncheckedUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUncheckedUpdateManyWithoutInitiatorNestedInput
    topSongs?: TopSongsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNowListeningInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountCreateNestedOneWithoutUserInput
    initiatedFriendships?: FriendshipCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNowListeningInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountUncheckedCreateNestedOneWithoutUserInput
    initiatedFriendships?: FriendshipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
    topSongs?: TopSongsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNowListeningInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNowListeningInput, UserUncheckedCreateWithoutNowListeningInput>
  }

  export type UserUpsertWithoutNowListeningInput = {
    update: XOR<UserUpdateWithoutNowListeningInput, UserUncheckedUpdateWithoutNowListeningInput>
    create: XOR<UserCreateWithoutNowListeningInput, UserUncheckedCreateWithoutNowListeningInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNowListeningInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNowListeningInput, UserUncheckedUpdateWithoutNowListeningInput>
  }

  export type UserUpdateWithoutNowListeningInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUpdateOneWithoutUserNestedInput
    initiatedFriendships?: FriendshipUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNowListeningInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUncheckedUpdateOneWithoutUserNestedInput
    initiatedFriendships?: FriendshipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
    topSongs?: TopSongsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTopSongsInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountCreateNestedOneWithoutUserInput
    nowListening?: NowListeningCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipCreateNestedManyWithoutReceiverInput
  }

  export type UserUncheckedCreateWithoutTopSongsInput = {
    id?: string
    firstName: string
    lastName: string
    username: string
    password: string
    email: string
    spotifyAccount?: SpotifyAccountUncheckedCreateNestedOneWithoutUserInput
    nowListening?: NowListeningUncheckedCreateNestedManyWithoutUserInput
    initiatedFriendships?: FriendshipUncheckedCreateNestedManyWithoutInitiatorInput
    receivedFriendships?: FriendshipUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type UserCreateOrConnectWithoutTopSongsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTopSongsInput, UserUncheckedCreateWithoutTopSongsInput>
  }

  export type UserUpsertWithoutTopSongsInput = {
    update: XOR<UserUpdateWithoutTopSongsInput, UserUncheckedUpdateWithoutTopSongsInput>
    create: XOR<UserCreateWithoutTopSongsInput, UserUncheckedCreateWithoutTopSongsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTopSongsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTopSongsInput, UserUncheckedUpdateWithoutTopSongsInput>
  }

  export type UserUpdateWithoutTopSongsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUpdateManyWithoutReceiverNestedInput
  }

  export type UserUncheckedUpdateWithoutTopSongsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    spotifyAccount?: SpotifyAccountUncheckedUpdateOneWithoutUserNestedInput
    nowListening?: NowListeningUncheckedUpdateManyWithoutUserNestedInput
    initiatedFriendships?: FriendshipUncheckedUpdateManyWithoutInitiatorNestedInput
    receivedFriendships?: FriendshipUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type NowListeningCreateManyUserInput = {
    id?: string
    trackId: string
  }

  export type FriendshipCreateManyInitiatorInput = {
    id?: string
    receiverId: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type FriendshipCreateManyReceiverInput = {
    id?: string
    initiatorId: string
    initiatorConfirmed?: boolean
    receiverConfirmed?: boolean
    confirmed?: boolean
  }

  export type TopSongsCreateManyUserInput = {
    id?: string
    trackId: string
  }

  export type NowListeningUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type NowListeningUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type NowListeningUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    receiver?: UserUpdateOneRequiredWithoutReceivedFriendshipsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    initiator?: UserUpdateOneRequiredWithoutInitiatedFriendshipsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    initiatorConfirmed?: BoolFieldUpdateOperationsInput | boolean
    receiverConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TopSongsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TopSongsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TopSongsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpotifyAccountDefaultArgs instead
     */
    export type SpotifyAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpotifyAccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FriendshipDefaultArgs instead
     */
    export type FriendshipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FriendshipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NowListeningDefaultArgs instead
     */
    export type NowListeningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NowListeningDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopSongsDefaultArgs instead
     */
    export type TopSongsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopSongsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}